# GitHub Actions Workflow is created for testing and preparing the plugin release in the following steps:
# - Validate Gradle Wrapper.
# - Run 'test' and 'verifyPlugin' tasks.
# - Run Qodana inspections.
# - Run the 'buildPlugin' task and prepare artifact for further tests.
# - Run the 'runPluginVerifier' task.
# - Create a draft release.
#
# The workflow is triggered on push and pull_request events.
#
# GitHub Actions reference: https://help.github.com/en/actions
#
## JBIJPPTPL

name: Build
on:
  # Trigger the workflow on pushes to only the 'main' branch (this avoids duplicate checks being run e.g., for dependabot pull requests)
  push:
    branches: [ main ]
  # Trigger the workflow on any pull request
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
  
jobs:

  # Prepare the environment and build the plugin
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: false
          large-packages: false

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up the Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      # Build plugin
      - name: Build plugin
        run: cd intellij-freezeguard && ./gradlew buildPlugin

      # Prepare plugin archive content for creating artifact
      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/intellij-freezeguard/build/distributions
          FILENAME=`ls *.zip`
          unzip "$FILENAME" -d content

          echo "filename=${FILENAME:0:-4}" >> $GITHUB_OUTPUT

      # Store an already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./intellij-freezeguard/build/distributions/content/*/*

  # Run essential tests only (fast feedback)
  test:
    name: Essential Tests
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up the Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: true

      # Run only unit tests (skip slow integration tests)
      - name: Run Unit Tests
        run: cd intellij-freezeguard && ./gradlew test

  # Run Qodana inspections and provide a report (main branch only)
  inspectCode:
    name: Inspect code
    if: github.ref == 'refs/heads/main'
    needs: [ build ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write
      pull-requests: write
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: false
          large-packages: false

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
          fetch-depth: 0  # a full history is required for pull request analysis

      # Set up the Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21

      # Run Qodana inspections
      - name: Qodana - Code Inspection
        uses: JetBrains/qodana-action@v2025.1.1
        with:
          cache-default-branch-only: true
          args: --project-dir,intellij-freezeguard

  # Run plugin structure verification along with IntelliJ Plugin Verifier (main branch only)
  verify:
    name: Verify plugin
    if: github.ref == 'refs/heads/main'
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: false
          large-packages: false

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up the Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: true

      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
      - name: Run Plugin Verification tasks
        run: cd intellij-freezeguard && ./gradlew verifyPlugin

      # Collect Plugin Verifier Result
      - name: Collect Plugin Verifier Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/intellij-freezeguard/build/reports/pluginVerifier

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, the release workflow would be triggered
  releaseDraft:
    name: Release draft
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    needs: [ build, test ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up the Java environment for Gradle operations
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: true

      # Download IntelliJ plugin artifact from build job
      - name: Download IntelliJ Plugin Artifact
        uses: actions/download-artifact@v4
        with:
          pattern: 'intellij-freezeguard-*'
          path: ./artifacts/intellij/

      # Remove old release drafts by using the curl request for the available releases with a draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create a comprehensive release draft with both IntelliJ and VS Code extensions
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd intellij-freezeguard
          VERSION=$(./gradlew properties --property version --quiet --console=plain | tail -n 1 | cut -f2- -d ' ')
          
          # Generate changelog-based release notes
          RELEASE_NOTE="./build/tmp/release_note.txt"
          ./gradlew getChangelog --unreleased --no-header --quiet --console=plain --output-file=$RELEASE_NOTE
          
          # Append installation and usage instructions to changelog content
          cat >> $RELEASE_NOTE << 'INSTALLATION_EOF'
          
          ## Package Contents
          
          This release includes:
          - **IntelliJ IDEA Plugin**: Cross-platform performance monitoring for IntelliJ-based IDEs
          - **VS Code Extension**: Performance monitoring extension for Visual Studio Code
          - **Collector Service**: Centralized telemetry collection service (Docker deployable)
          
          ## Installation
          
          ### IntelliJ Plugin
          1. Download the IntelliJ plugin ZIP file from the assets below
          2. In IntelliJ: Settings → Plugins → Install Plugin from Disk
          3. Select the downloaded ZIP file and restart IntelliJ
          4. Access via: Tools → Freeze Guard menu items
          
          ### VS Code Extension
          1. Download the VSIX file from the assets below
          2. In VS Code: Extensions → Install from VSIX (or use code --install-extension filename.vsix)
          3. Select the downloaded VSIX file and reload VS Code
          4. Access via: Command Palette (Ctrl+Shift+P) → "Freeze Guard"
          
          ### Collector Service
          1. Clone the repository or extract the source code
          2. Navigate to the collector directory
          3. Run docker-compose up to start the monitoring infrastructure
          4. The collector will be available at http://localhost:8000
          5. Metrics are exposed at http://localhost:8000/metrics (Prometheus format)
          
          ## Usage
          
          ### Performance Testing Commands
          - **Measure Current Action**: Baseline performance measurement
          - **Run BAD Blocking Action**: Demonstrates UI blocking issues
          - **Run FIXED Background Action**: Shows proper async handling
          
          ### Monitoring Dashboard
          Use the included Grafana dashboard to visualize performance metrics collected from both IDEs.
          
          ## Requirements
          
          - **IntelliJ Plugin**: IntelliJ IDEA 2024.2+ (Community or Ultimate)
          - **VS Code Extension**: VS Code 1.74.0+
          - **Collector Service**: Docker and Docker Compose
          
          ## Support
          
          Report issues at: https://github.com/jinahn130/IDE-FreezeGuard/issues
          INSTALLATION_EOF
          
          # Create the release with IntelliJ plugin
          gh release create $VERSION \
            --draft \
            --title "IDE FreezeGuard $VERSION - IntelliJ Performance Monitoring" \
            --notes-file $RELEASE_NOTE \
            ../artifacts/intellij/**/*.zip

  # Test VS Code extension (main branch only)  
  test-vscode:
    name: Test VS Code Extension
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Install dependencies
      - name: Install VS Code Extension Dependencies
        run: |
          cd vscode-freezeguard/extension
          npm cache clean --force
          npm install

      # Compile TypeScript
      - name: Compile VS Code Extension
        run: cd vscode-freezeguard/extension && npm run compile

      # Run tests
      - name: Run VS Code Extension Tests
        run: cd vscode-freezeguard/extension && npm test

      # Build VSIX package
      - name: Build VSIX Package
        run: |
          cd vscode-freezeguard/extension
          npx @vscode/vsce@latest package --out ../../vscode-freezeguard.vsix

      # Upload VS Code extension artifact
      - name: Upload VS Code Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: vscode-freezeguard-extension
          path: vscode-freezeguard.vsix

  # Test collector API (main branch only)
  test-collector:
    name: Test Collector API
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Install collector dependencies
      - name: Install Collector Dependencies
        run: |
          cd collector
          pip install -r requirements.txt

      # Run collector tests
      - name: Run Collector Tests
        run: |
          cd collector
          python -m pytest tests/ -v

      # Test collector startup
      - name: Test Collector Startup
        run: |
          cd collector
          timeout 10s python -m uvicorn app:app --host 127.0.0.1 --port 8000 &
          sleep 5
          curl -f http://127.0.0.1:8000/metrics || exit 1
