# GitHub Actions Workflow is created for testing and preparing the plugin release in the following steps:
# - Validate Gradle Wrapper.
# - Run 'test' and 'verifyPlugin' tasks.
# - Run Qodana inspections.
# - Run the 'buildPlugin' task and prepare artifact for further tests.
# - Run the 'runPluginVerifier' task.
# - Create a draft release.
#
# The workflow is triggered on push and pull_request events.
#
# GitHub Actions reference: https://help.github.com/en/actions
#
## JBIJPPTPL

name: Build
on:
  # Trigger the workflow on pushes to only the 'main' branch (this avoids duplicate checks being run e.g., for dependabot pull requests)
  push:
    branches: [ main ]
  # Trigger the workflow on any pull request
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
  
jobs:

  # Prepare the environment and build the plugin
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: false
          large-packages: false

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up the Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      # Build plugin
      - name: Build plugin
        run: cd intellij-freezeguard && ./gradlew buildPlugin

      # Prepare plugin archive content for creating artifact
      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/intellij-freezeguard/build/distributions
          FILENAME=`ls *.zip`
          unzip "$FILENAME" -d content

          echo "filename=${FILENAME:0:-4}" >> $GITHUB_OUTPUT

      # Store an already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./intellij-freezeguard/build/distributions/content/*/*

  # Run tests and upload a code coverage report
  test:
    name: Test
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: false
          large-packages: false

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up the Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: true

      # Run tests
      - name: Run Tests
        run: cd intellij-freezeguard && ./gradlew check

      # Collect Tests Result of failed tests
      - name: Collect Tests Result
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: tests-result
          path: ${{ github.workspace }}/intellij-freezeguard/build/reports/tests

      # Upload the Kover report to CodeCov
      - name: Upload Code Coverage Report
        uses: codecov/codecov-action@v5
        with:
          files: ${{ github.workspace }}/intellij-freezeguard/build/reports/kover/report.xml
          token: ${{ secrets.CODECOV_TOKEN }}

  # Run Qodana inspections and provide a report
  inspectCode:
    name: Inspect code
    needs: [ build ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write
      pull-requests: write
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: false
          large-packages: false

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
          fetch-depth: 0  # a full history is required for pull request analysis

      # Set up the Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21

      # Run Qodana inspections
      - name: Qodana - Code Inspection
        uses: JetBrains/qodana-action@v2025.1.1
        with:
          cache-default-branch-only: true
          args: --project-dir,intellij-freezeguard

  # Run plugin structure verification along with IntelliJ Plugin Verifier
  verify:
    name: Verify plugin
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: false
          large-packages: false

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up the Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: true

      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
      - name: Run Plugin Verification tasks
        run: cd intellij-freezeguard && ./gradlew verifyPlugin

      # Collect Plugin Verifier Result
      - name: Collect Plugin Verifier Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/intellij-freezeguard/build/reports/pluginVerifier

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, the release workflow would be triggered
  releaseDraft:
    name: Release draft
    if: github.event_name != 'pull_request'
    needs: [ build, test, inspectCode, verify, test-vscode, test-collector ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up the Java environment for Gradle operations
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: true

      # Download IntelliJ plugin artifact from build job
      - name: Download IntelliJ Plugin Artifact
        uses: actions/download-artifact@v4
        with:
          pattern: 'intellij-freezeguard-*'
          path: ./artifacts/intellij/

      # Download VS Code extension artifact from test-vscode job
      - name: Download VS Code Extension Artifact
        uses: actions/download-artifact@v4
        with:
          name: vscode-freezeguard-extension
          path: ./artifacts/vscode/

      # Remove old release drafts by using the curl request for the available releases with a draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create a comprehensive release draft with both IntelliJ and VS Code extensions
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd intellij-freezeguard
          VERSION=$(./gradlew properties --property version --quiet --console=plain | tail -n 1 | cut -f2- -d ' ')
          RELEASE_NOTE="./build/tmp/release_note.txt"
          ./gradlew getChangelog --unreleased --no-header --quiet --console=plain --output-file=$RELEASE_NOTE
          
          # Create enhanced release notes that cover both extensions
          echo "" >> $RELEASE_NOTE
          echo "## Package Contents" >> $RELEASE_NOTE
          echo "" >> $RELEASE_NOTE
          echo "This release includes:" >> $RELEASE_NOTE
          echo "- **IntelliJ IDEA Plugin**: Cross-platform performance monitoring for IntelliJ-based IDEs" >> $RELEASE_NOTE
          echo "- **VS Code Extension**: Performance monitoring extension for Visual Studio Code" >> $RELEASE_NOTE
          echo "- **Collector Service**: Centralized telemetry collection service (Docker deployable)" >> $RELEASE_NOTE
          echo "" >> $RELEASE_NOTE
          echo "## Installation" >> $RELEASE_NOTE
          echo "" >> $RELEASE_NOTE
          echo "### IntelliJ Plugin" >> $RELEASE_NOTE
          echo "1. Download the IntelliJ plugin ZIP file" >> $RELEASE_NOTE
          echo "2. In IntelliJ: Settings → Plugins → Install Plugin from Disk" >> $RELEASE_NOTE
          echo "3. Select the downloaded ZIP file and restart IntelliJ" >> $RELEASE_NOTE
          echo "" >> $RELEASE_NOTE
          echo "### VS Code Extension" >> $RELEASE_NOTE
          echo "1. Download the VSIX file" >> $RELEASE_NOTE
          echo "2. In VS Code: Extensions → Install from VSIX" >> $RELEASE_NOTE
          echo "3. Select the downloaded VSIX file and reload VS Code" >> $RELEASE_NOTE
          echo "" >> $RELEASE_NOTE
          echo "### Collector Service" >> $RELEASE_NOTE
          echo "Run \`docker-compose up\` in the collector directory to start the monitoring infrastructure." >> $RELEASE_NOTE
          
          # Create the release with both artifacts
          gh release create $VERSION \
            --draft \
            --title "IDE FreezeGuard $VERSION - Cross-Platform Performance Monitoring" \
            --notes-file $RELEASE_NOTE \
            ../artifacts/intellij/**/*.zip \
            ../artifacts/vscode/*.vsix

  # Test VS Code extension
  test-vscode:
    name: Test VS Code Extension  
    runs-on: ubuntu-latest
    steps:

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Install dependencies
      - name: Install VS Code Extension Dependencies
        run: |
          cd vscode-freezeguard/extension
          npm cache clean --force
          npm install

      # Compile TypeScript
      - name: Compile VS Code Extension
        run: cd vscode-freezeguard/extension && npm run compile

      # Run tests
      - name: Run VS Code Extension Tests
        run: cd vscode-freezeguard/extension && npm test

      # Build VSIX package
      - name: Build VSIX Package
        run: |
          cd vscode-freezeguard/extension
          npx @vscode/vsce@latest package --out ../../vscode-freezeguard.vsix

      # Upload VS Code extension artifact
      - name: Upload VS Code Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: vscode-freezeguard-extension
          path: vscode-freezeguard.vsix

  # Test collector API
  test-collector:
    name: Test Collector API
    runs-on: ubuntu-latest
    steps:

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Install collector dependencies
      - name: Install Collector Dependencies
        run: |
          cd collector
          pip install -r requirements.txt

      # Run collector tests
      - name: Run Collector Tests
        run: |
          cd collector
          python -m pytest tests/ -v

      # Test collector startup
      - name: Test Collector Startup
        run: |
          cd collector
          timeout 10s python -m uvicorn app:app --host 127.0.0.1 --port 8000 &
          sleep 5
          curl -f http://127.0.0.1:8000/metrics || exit 1
